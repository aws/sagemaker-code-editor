Index: sagemaker-code-editor/third-party-src/src/vs/base/common/network.ts
===================================================================
--- sagemaker-code-editor.orig/third-party-src/src/vs/base/common/network.ts
+++ sagemaker-code-editor/third-party-src/src/vs/base/common/network.ts
@@ -168,7 +168,9 @@ class RemoteAuthoritiesImpl {
 		return URI.from({
 			scheme: platform.isWeb ? this._preferredWebSchema : Schemas.vscodeRemoteResource,
 			authority: `${host}:${port}`,
-			path: this._remoteResourcesPath,
+			path: platform.isWeb
+				? (window.location.pathname + "/" + this._remoteResourcesPath).replace(/\/\/+/g, "/")
+				: this._remoteResourcesPath,
 			query
 		});
 	}
Index: sagemaker-code-editor/third-party-src/src/vs/base/common/product.ts
===================================================================
--- sagemaker-code-editor.orig/third-party-src/src/vs/base/common/product.ts
+++ sagemaker-code-editor/third-party-src/src/vs/base/common/product.ts
@@ -55,6 +55,7 @@ export type ExtensionVirtualWorkspaceSup
 };
 
 export interface IProductConfiguration {
+	readonly rootEndpoint?: string
 	readonly version: string;
 	readonly date?: string;
 	readonly quality?: string;
Index: sagemaker-code-editor/third-party-src/src/vs/code/browser/workbench/workbench-dev.html
===================================================================
--- sagemaker-code-editor.orig/third-party-src/src/vs/code/browser/workbench/workbench-dev.html
+++ sagemaker-code-editor/third-party-src/src/vs/code/browser/workbench/workbench-dev.html
@@ -38,7 +38,7 @@
 	<script src="{{WORKBENCH_WEB_BASE_URL}}/out/vs/loader.js"></script>
 	<script src="{{WORKBENCH_WEB_BASE_URL}}/out/vs/webPackagePaths.js"></script>
 	<script>
-		const baseUrl = new URL('{{WORKBENCH_WEB_BASE_URL}}', window.location.origin).toString();
+		const baseUrl = new URL('{{WORKBENCH_WEB_BASE_URL}}', window.location).toString();
 		Object.keys(self.webPackagePaths).map(function (key, index) {
 			self.webPackagePaths[key] = `${baseUrl}/remote/web/node_modules/${key}/${self.webPackagePaths[key]}`;
 		});
Index: sagemaker-code-editor/third-party-src/src/vs/code/browser/workbench/workbench.html
===================================================================
--- sagemaker-code-editor.orig/third-party-src/src/vs/code/browser/workbench/workbench.html
+++ sagemaker-code-editor/third-party-src/src/vs/code/browser/workbench/workbench.html
@@ -36,7 +36,7 @@
 	<script src="{{WORKBENCH_WEB_BASE_URL}}/out/vs/loader.js"></script>
 	<script src="{{WORKBENCH_WEB_BASE_URL}}/out/vs/webPackagePaths.js"></script>
 	<script>
-		const baseUrl = new URL('{{WORKBENCH_WEB_BASE_URL}}', window.location.origin).toString();
+		const baseUrl = new URL('{{WORKBENCH_WEB_BASE_URL}}', window.location).toString();
 		Object.keys(self.webPackagePaths).map(function (key, index) {
 			self.webPackagePaths[key] = `${baseUrl}/node_modules/${key}/${self.webPackagePaths[key]}`;
 		});
Index: sagemaker-code-editor/third-party-src/src/vs/code/browser/workbench/workbench.ts
===================================================================
--- sagemaker-code-editor.orig/third-party-src/src/vs/code/browser/workbench/workbench.ts
+++ sagemaker-code-editor/third-party-src/src/vs/code/browser/workbench/workbench.ts
@@ -304,7 +304,8 @@ class LocalStorageURLCallbackProvider ex
 			this.startListening();
 		}
 
-		return URI.parse(window.location.href).with({ path: this._callbackRoute, query: queryParams.join('&') });
+		const path = (window.location.pathname + "/" + this._callbackRoute).replace(/\/\/+/g, "/");
+		return URI.parse(window.location.href).with({ path: path, query: queryParams.join('&') });
 	}
 
 	private startListening(): void {
Index: sagemaker-code-editor/third-party-src/src/vs/platform/extensionResourceLoader/common/extensionResourceLoader.ts
===================================================================
--- sagemaker-code-editor.orig/third-party-src/src/vs/platform/extensionResourceLoader/common/extensionResourceLoader.ts
+++ sagemaker-code-editor/third-party-src/src/vs/platform/extensionResourceLoader/common/extensionResourceLoader.ts
@@ -16,7 +16,6 @@ import { getServiceMachineId } from 'vs/
 import { IStorageService } from 'vs/platform/storage/common/storage';
 import { TelemetryLevel } from 'vs/platform/telemetry/common/telemetry';
 import { getTelemetryLevel, supportsTelemetry } from 'vs/platform/telemetry/common/telemetryUtils';
-import { RemoteAuthorities } from 'vs/base/common/network';
 import { getRemoteServerRootPath } from 'vs/platform/remote/common/remoteHosts';
 import { TargetPlatform } from 'vs/platform/extensions/common/extensions';
 
@@ -102,7 +101,7 @@ export abstract class AbstractExtensionR
 					: version,
 				path: 'extension'
 			}));
-			return this._isWebExtensionResourceEndPoint(uri) ? uri.with({ scheme: RemoteAuthorities.getPreferredWebSchema() }) : uri;
+			return this._isWebExtensionResourceEndPoint(uri) ? URI.joinPath(URI.parse(window.location.href), uri.path) : uri;
 		}
 		return undefined;
 	}
Index: sagemaker-code-editor/third-party-src/src/vs/platform/remote/browser/browserSocketFactory.ts
===================================================================
--- sagemaker-code-editor.orig/third-party-src/src/vs/platform/remote/browser/browserSocketFactory.ts
+++ sagemaker-code-editor/third-party-src/src/vs/platform/remote/browser/browserSocketFactory.ts
@@ -280,6 +280,7 @@ export class BrowserSocketFactory implem
 	connect({ host, port }: WebSocketRemoteConnection, path: string, query: string, debugLabel: string): Promise<ISocket> {
 		return new Promise<ISocket>((resolve, reject) => {
 			const webSocketSchema = (/^https:/.test(window.location.href) ? 'wss' : 'ws');
+			path = (window.location.pathname + "/" + path).replace(/\/\/+/g, "/")
 			const socket = this._webSocketFactory.create(`${webSocketSchema}://${(/:/.test(host) && !/\[/.test(host)) ? `[${host}]` : host}:${port}${path}?${query}&skipWebSocketFrames=false`, debugLabel);
 			const errorListener = socket.onError(reject);
 			socket.onOpen(() => {
Index: sagemaker-code-editor/third-party-src/src/vs/server/node/webClientServer.ts
===================================================================
--- sagemaker-code-editor.orig/third-party-src/src/vs/server/node/webClientServer.ts
+++ sagemaker-code-editor/third-party-src/src/vs/server/node/webClientServer.ts
@@ -278,7 +278,7 @@ export class WebClientServer {
 		const remoteAuthority = (
 			useTestResolver
 				? 'test+test'
-				: (getFirstHeader('x-original-host') || getFirstHeader('x-forwarded-host') || req.headers.host)
+				: (getFirstHeader('x-original-host') || getFirstHeader('x-forwarded-host') || req.headers.host || window.location.host)
 		);
 		if (!remoteAuthority) {
 			return serveError(req, res, 400, `Bad request.`);
@@ -305,7 +305,12 @@ export class WebClientServer {
 			scopes: [['user:email'], ['repo']]
 		} : undefined;
 
+		const basePath: string = this._environmentService.args['base-path'] || "/"
+		const base = relativeRoot(basePath)
+		const vscodeBase = relativePath(basePath)
+
 		const productConfiguration = <Partial<IProductConfiguration>>{
+			rootEndpoint: base,
 			embedderIdentifier: 'server-distro',
 			extensionsGallery: this._webExtensionResourceUrlTemplate ? {
 				...this._productService.extensionsGallery,
@@ -340,8 +345,10 @@ export class WebClientServer {
 		const values: { [key: string]: string } = {
 			WORKBENCH_WEB_CONFIGURATION: asJSON(workbenchWebConfiguration),
 			WORKBENCH_AUTH_SESSION: authSessionInfo ? asJSON(authSessionInfo) : '',
-			WORKBENCH_WEB_BASE_URL: this._staticRoute,
-			WORKBENCH_NLS_BASE_URL: nlsBaseUrl ? `${nlsBaseUrl}${!nlsBaseUrl.endsWith('/') ? '/' : ''}${this._productService.commit}/${this._productService.version}/` : '',
+			WORKBENCH_WEB_BASE_URL: vscodeBase + this._staticRoute,
+			WORKBENCH_NLS_BASE_URL: vscodeBase + (nlsBaseUrl ? `${nlsBaseUrl}${!nlsBaseUrl.endsWith('/') ? '/' : ''}${this._productService.commit}/${this._productService.version}/` : ''),
+			BASE: base,
+			VS_BASE: vscodeBase,
 		};
 
 		if (useTestResolver) {
@@ -439,3 +446,60 @@ export class WebClientServer {
 		return void res.end(data);
 	}
 }
+
+
+/**
+ * Remove extra slashes in a URL.
+ *
+ * This is meant to fill the job of `path.join` so you can concatenate paths and
+ * then normalize out any extra slashes.
+ *
+ * If you are using `path.join` you do not need this but note that `path` is for
+ * file system paths, not URLs.
+ */
+export const normalizeUrlPath = (url: string, keepTrailing = false): string => {
+	return url.replace(/\/\/+/g, "/").replace(/\/+$/, keepTrailing ? "/" : "")
+}
+
+/**
+ * Get the relative path that will get us to the root of the page. For each
+ * slash we need to go up a directory.  Will not have a trailing slash.
+ *
+ * For example:
+ *
+ * / => .
+ * /foo => .
+ * /foo/ => ./..
+ * /foo/bar => ./..
+ * /foo/bar/ => ./../..
+ *
+ * All paths must be relative in order to work behind a reverse proxy since we
+ * we do not know the base path.  Anything that needs to be absolute (for
+ * example cookies) must get the base path from the frontend.
+ *
+ * All relative paths must be prefixed with the relative root to ensure they
+ * work no matter the depth at which they happen to appear.
+ *
+ * For Express `req.originalUrl` should be used as they remove the base from the
+ * standard `url` property making it impossible to get the true depth.
+ */
+export const relativeRoot = (originalUrl: string): string => {
+	const depth = (originalUrl.split("?", 1)[0].match(/\//g) || []).length
+	return normalizeUrlPath("./" + (depth > 1 ? "../".repeat(depth - 1) : ""))
+}
+
+/**
+ * Get the relative path to the current resource.
+ *
+ * For example:
+ *
+ * / => .
+ * /foo => ./foo
+ * /foo/ => .
+ * /foo/bar => ./bar
+ * /foo/bar/ => .
+ */
+export const relativePath = (originalUrl: string): string => {
+	const parts = originalUrl.split("?", 1)[0].split("/")
+	return normalizeUrlPath("./" + parts[parts.length - 1])
+}
Index: sagemaker-code-editor/third-party-src/src/vs/server/node/serverEnvironmentService.ts
===================================================================
--- sagemaker-code-editor.orig/third-party-src/src/vs/server/node/serverEnvironmentService.ts
+++ sagemaker-code-editor/third-party-src/src/vs/server/node/serverEnvironmentService.ts
@@ -87,6 +87,9 @@ export const serverOptions: OptionDescri
 
 	'compatibility': { type: 'string' },
 
+	/* ----- sagemaker ----- */
+	'base-path': { type: 'string' },
+
 	_: OPTIONS['_']
 };
 
@@ -203,6 +206,9 @@ export interface ServerParsedArgs {
 
 	compatibility: string;
 
+	/* ----- sagemaker ----- */
+	'base-path'?: string,
+
 	_: string[];
 }
 
